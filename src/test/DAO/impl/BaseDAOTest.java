package DAO.impl;

import DAO.connection.DataSourcePool;
import org.junit.AfterClass;
import org.junit.BeforeClass;

import javax.sql.DataSource;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;

/**
 * Created by edik2 on 23.01.2018.
 */
public abstract class BaseDAOTest {

    static protected DataSourcePool dataSource;

    @BeforeClass
    public static void init() throws SQLException, ClassNotFoundException, IOException {
        //Class.forName("org.hsqldb.jdbc.JDBCDriver");
        dataSource = new DataSourcePool("database_test");

        // initialize database
        initDatabase();
    }


    @AfterClass
    public static void destroy() throws SQLException, ClassNotFoundException, IOException {
        try (Connection connection = dataSource.getConnection(); Statement statement = connection.createStatement()) {
            statement.executeUpdate("DROP TABLE food_intake");
            statement.executeUpdate("DROP TABLE food");
            statement.executeUpdate("DROP TABLE account");
        }

        dataSource.close();
    }

    /**
     * Database initialization for testing i.e.
     * <ul>
     * <li>Creating Table</li>
     * <li>Inserting record</li>
     * </ul>
     *
     * @throws SQLException
     */
    private static void initDatabase() throws SQLException {

        String sql1 = "CREATE TABLE account (" +
                "id int GENERATED BY DEFAULT AS IDENTITY(START WITH 0, INCREMENT BY 1) PRIMARY KEY, " +
                "first_name varchar(10) NOT NULL, " +
                "second_name varchar(15) NOT NULL, " +
                "login varchar(10) NOT NULL, " +
                "password varchar(15) NOT NULL, " +
                "height smallint NOT NULL, " +
                "weight smallint NOT NULL, " +
                "way_of_life decimal NOT NULL, " +
                "age int NOT NULL, " +
                "norm smallint NOT NULL, " +
                "gender varchar(7) NOT NULL)";

        String sql2 = "CREATE TABLE food ( " +
                "id int GENERATED BY DEFAULT AS IDENTITY(START WITH 0, INCREMENT BY 1) PRIMARY KEY, " +
                "foodname varchar(20) NOT NULL, " +
                "calories int NOT NULL, " +
                "proteins float NOT NULL, " +
                "grease float NOT NULL, " +
                "angularrods float NOT NULL, " +
                "account_id int DEFAULT NULL, FOREIGN KEY(account_id) REFERENCES account(id))";

        String sql3 ="CREATE TABLE food_intake (" +
                "id int GENERATED BY DEFAULT AS IDENTITY(START WITH 0, INCREMENT BY 1) PRIMARY KEY, " +
                "food_id int NOT NULL," +
                "account_id int NOT NULL," +
                "grams int NOT NULL," +
                "calories float NOT NULL," +
                "eating_date date NOT NULL, FOREIGN KEY(account_id) REFERENCES account(id), FOREIGN KEY(food_id) REFERENCES food(id))";
        try (Connection connection = dataSource.getConnection(); Statement statement = connection.createStatement()) {
            statement.execute(sql1);
            statement.execute(sql2);
            statement.execute(sql3);
//


//            statement.executeUpdate(
//                    "INSERT INTO employee VALUES (1001,'Vinod Kumar Kashyap', 'vinod@javacodegeeks.com')");
//            statement.executeUpdate("INSERT INTO employee VALUES (1002,'Dhwani Kashyap', 'dhwani@javacodegeeks.com')");
//            statement.executeUpdate("INSERT INTO employee VALUES (1003,'Asmi Kashyap', 'asmi@javacodegeeks.com')");
//            connection.commit();
        }
    }

}
